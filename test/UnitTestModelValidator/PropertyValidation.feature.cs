// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UnitTestModelValidator
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class PropertyValidationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "PropertyValidation", "In order to 使用Attribute就能針對entity進行Validation動作\r\nAs a 開發人員\r\nI want to 取得Validatio" +
                    "n失敗的property name, error message, value", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "PropertyValidation")))
            {
                UnitTestModelValidator.PropertyValidationFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("驗證Person的Name必須有值，若null或空字串，則驗證結果失敗，取得對應的error message")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PropertyValidation")]
        public virtual void 驗證Person的Name必須有值若Null或空字串則驗證結果失敗取得對應的ErrorMessage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("驗證Person的Name必須有值，若null或空字串，則驗證結果失敗，取得對應的error message", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Birthday"});
            table1.AddRow(new string[] {
                        "1",
                        "",
                        "1991-09-01"});
            testRunner.Given("針對Person", ((string)(null)), table1, "Given ");
            testRunner.When("呼叫DataAnnotationValidator的TryValidate方法", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("應回傳 false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And("ValidationResult應為 1 筆，其PropertyName為 Name ，其ErrorMessage應為 The Name field is req" +
                    "uired.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            this.ScenarioCleanup();
        }
        
        public virtual void 驗證Customer的Age必須介於18100若Age不在此範圍中則驗證結果失敗取得對應的ErrorMessage(string id, string age, string expectResult, string errorCount, string propertyName, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("驗證Customer的Age必須介於18~100，若Age不在此範圍中，則驗證結果失敗，取得對應的error message", exampleTags);
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given(string.Format("Customer的ID為{0}", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.And(string.Format("Customer的Age為{0}", age), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.When("呼叫DataAnnotationValidator的TryValidate方法", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then(string.Format("應回傳 {0}", expectResult), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And(string.Format("ValidationResult應為 {0} 筆，其PropertyName為 {1} ，其ErrorMessage應為 {2}", errorCount, propertyName, errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("驗證Customer的Age必須介於18~100，若Age不在此範圍中，則驗證結果失敗，取得對應的error message")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PropertyValidation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:id", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:age", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:expectResult", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorCount", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:propertyName", "Age")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorMessage", "The field Age must be between 18 and 80.")]
        public virtual void 驗證Customer的Age必須介於18100若Age不在此範圍中則驗證結果失敗取得對應的ErrorMessage_1()
        {
            this.驗證Customer的Age必須介於18100若Age不在此範圍中則驗證結果失敗取得對應的ErrorMessage("1", "10", "false", "1", "Age", "The field Age must be between 18 and 80.", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("驗證Customer的Age必須介於18~100，若Age不在此範圍中，則驗證結果失敗，取得對應的error message")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PropertyValidation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:id", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:age", "18")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:expectResult", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorCount", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:propertyName", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorMessage", "")]
        public virtual void 驗證Customer的Age必須介於18100若Age不在此範圍中則驗證結果失敗取得對應的ErrorMessage_2()
        {
            this.驗證Customer的Age必須介於18100若Age不在此範圍中則驗證結果失敗取得對應的ErrorMessage("2", "18", "true", "0", "", "", ((string[])(null)));
        }
        
        public virtual void 驗證Order上的Customer若Age不在18100則驗證結果失敗(string orderId, string id, string age, string expectResult, string errorCount, string propertyName, string errorMessage, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("驗證Order上的Customer，若Age不在18~100，則驗證結果失敗", exampleTags);
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given(string.Format("Order的ID為{0}", orderId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.And(string.Format("Customer的ID為{0}", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.And(string.Format("Customer的Age為{0}", age), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.When("呼叫DataAnnotationValidator的TryValidate方法", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then(string.Format("應回傳 {0}", expectResult), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            testRunner.And(string.Format("ValidationResult應為 {0} 筆，其PropertyName為 {1} ，其ErrorMessage應為 {2}", errorCount, propertyName, errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("驗證Order上的Customer，若Age不在18~100，則驗證結果失敗")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PropertyValidation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:orderId", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:id", "3")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:age", "10")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:expectResult", "false")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorCount", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:propertyName", "MyCustomer.Id,MyCustomer.Age")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorMessage", "The field MyCustomer.Id must be between 0 and 2.,The field MyCustomer.Age must be" +
            " between 18 and 80.")]
        public virtual void 驗證Order上的Customer若Age不在18100則驗證結果失敗_10()
        {
            this.驗證Order上的Customer若Age不在18100則驗證結果失敗("10", "3", "10", "false", "2", "MyCustomer.Id,MyCustomer.Age", "The field MyCustomer.Id must be between 0 and 2.,The field MyCustomer.Age must be" +
                    " between 18 and 80.", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("驗證Order上的Customer，若Age不在18~100，則驗證結果失敗")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PropertyValidation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:orderId", "20")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:id", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:age", "18")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:expectResult", "true")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorCount", "0")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:propertyName", "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:errorMessage", "")]
        public virtual void 驗證Order上的Customer若Age不在18100則驗證結果失敗_20()
        {
            this.驗證Order上的Customer若Age不在18100則驗證結果失敗("20", "2", "18", "true", "0", "", "", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("驗證三層Model，是否可正確取得Validation錯誤訊息")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PropertyValidation")]
        public virtual void 驗證三層Model是否可正確取得Validation錯誤訊息()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("驗證三層Model，是否可正確取得Validation錯誤訊息", ((string[])(null)));
            this.ScenarioSetup(scenarioInfo);
            testRunner.Given("OrderGroup的OrderName為空", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
            testRunner.And("MyOrder的Id為110", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.And("MyOrder的MyCustomer的Age為10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.And("MyOrder的MyCustomer的Id為1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
            testRunner.When("呼叫DataAnnotationValidator的TryValidate方法", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("TryValidate結果應為 false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "MemberName",
                        "ErrorMessage"});
            table2.AddRow(new string[] {
                        "OrderName",
                        "The OrderName field is required."});
            table2.AddRow(new string[] {
                        "MyOrder.Id",
                        "The field MyOrder.Id must be between 0 and 100."});
            table2.AddRow(new string[] {
                        "MyOrder.MyCustomer.Age",
                        "The field MyOrder.MyCustomer.Age must be between 18 and 80."});
            testRunner.And("應回傳ValidationResults", ((string)(null)), table2, "And ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("驗證Product自訂商業邏輯，是否可正確取得Validation錯誤訊息")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PropertyValidation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("product")]
        public virtual void 驗證Product自訂商業邏輯是否可正確取得Validation錯誤訊息()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("驗證Product自訂商業邏輯，是否可正確取得Validation錯誤訊息", new string[] {
                        "product"});
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Cost",
                        "SellPrice"});
            table3.AddRow(new string[] {
                        "100",
                        "105"});
            testRunner.Given("Product為", ((string)(null)), table3, "Given ");
            testRunner.When("呼叫DataAnnotationValidator的TryValidate方法", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("TryValidate結果應為 false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "MemberName",
                        "ErrorMessage"});
            table4.AddRow(new string[] {
                        "毛利率",
                        "毛利率需大於6%"});
            testRunner.And("應回傳ValidationResults", ((string)(null)), table4, "And ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("驗證Product的Cost與SellPrice不符合驗證規則時，應只先檢查property，而不檢查自訂商業邏輯")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PropertyValidation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("product")]
        public virtual void 驗證Product的Cost與SellPrice不符合驗證規則時應只先檢查Property而不檢查自訂商業邏輯()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("驗證Product的Cost與SellPrice不符合驗證規則時，應只先檢查property，而不檢查自訂商業邏輯", new string[] {
                        "product"});
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Cost",
                        "SellPrice"});
            table5.AddRow(new string[] {
                        "50",
                        "51"});
            testRunner.Given("Product為", ((string)(null)), table5, "Given ");
            testRunner.When("呼叫DataAnnotationValidator的TryValidate方法", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("TryValidate結果應為 false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "MemberName",
                        "ErrorMessage"});
            table6.AddRow(new string[] {
                        "Cost",
                        "The field Cost must be between 100 and 2147483647."});
            table6.AddRow(new string[] {
                        "SellPrice",
                        "The field SellPrice must be between 100 and 2147483647."});
            testRunner.And("應回傳ValidationResults", ((string)(null)), table6, "And ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("驗證ProductModel中，Person property與Product property不符合驗證規則時，是否可正確取得Validation錯誤訊息")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PropertyValidation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("productModel")]
        public virtual void 驗證ProductModel中PersonProperty與ProductProperty不符合驗證規則時是否可正確取得Validation錯誤訊息()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("驗證ProductModel中，Person property與Product property不符合驗證規則時，是否可正確取得Validation錯誤訊息", new string[] {
                        "productModel"});
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Birthday"});
            table7.AddRow(new string[] {
                        "1",
                        "",
                        "1991-09-01"});
            testRunner.Given("ProductModel.MyPerson為", ((string)(null)), table7, "Given ");
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Cost",
                        "SellPrice"});
            table8.AddRow(new string[] {
                        "50",
                        "51"});
            testRunner.And("ProductModel.MyProduct為", ((string)(null)), table8, "And ");
            testRunner.When("呼叫DataAnnotationValidator的TryValidate方法", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("TryValidate結果應為 false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "MemberName",
                        "ErrorMessage"});
            table9.AddRow(new string[] {
                        "MyPerson.Name",
                        "The MyPerson.Name field is required."});
            table9.AddRow(new string[] {
                        "MyProduct.Cost",
                        "The field MyProduct.Cost must be between 100 and 2147483647."});
            table9.AddRow(new string[] {
                        "MyProduct.SellPrice",
                        "The field MyProduct.SellPrice must be between 100 and 2147483647."});
            testRunner.And("應回傳ValidationResults", ((string)(null)), table9, "And ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("驗證ProductModel中，Person property與Product property皆符合驗證規則時，是否可正確驗證Product自訂商業邏輯")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PropertyValidation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("productModel")]
        public virtual void 驗證ProductModel中PersonProperty與ProductProperty皆符合驗證規則時是否可正確驗證Product自訂商業邏輯()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("驗證ProductModel中，Person property與Product property皆符合驗證規則時，是否可正確驗證Product自訂商業邏輯", new string[] {
                        "productModel"});
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Birthday"});
            table10.AddRow(new string[] {
                        "1",
                        "\"Joey\"",
                        "1991-09-01"});
            testRunner.Given("ProductModel.MyPerson為", ((string)(null)), table10, "Given ");
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Cost",
                        "SellPrice"});
            table11.AddRow(new string[] {
                        "100",
                        "105"});
            testRunner.And("ProductModel.MyProduct為", ((string)(null)), table11, "And ");
            testRunner.When("呼叫DataAnnotationValidator的TryValidate方法", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("TryValidate結果應為 false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "MemberName",
                        "ErrorMessage"});
            table12.AddRow(new string[] {
                        "MyProduct.毛利率",
                        "MyProduct.毛利率需大於6%"});
            testRunner.And("應回傳ValidationResults", ((string)(null)), table12, "And ");
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("驗證ProductModel中，Person property不符合驗證，但Product property皆符合驗證規則時，是否可正確驗證Product自訂商業" +
            "邏輯")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "PropertyValidation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("productModel")]
        public virtual void 驗證ProductModel中PersonProperty不符合驗證但ProductProperty皆符合驗證規則時是否可正確驗證Product自訂商業邏輯()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("驗證ProductModel中，Person property不符合驗證，但Product property皆符合驗證規則時，是否可正確驗證Product自訂商業" +
                    "邏輯", new string[] {
                        "productModel"});
            this.ScenarioSetup(scenarioInfo);
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "Birthday"});
            table13.AddRow(new string[] {
                        "1",
                        "",
                        "1991-09-01"});
            testRunner.Given("ProductModel.MyPerson為", ((string)(null)), table13, "Given ");
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Cost",
                        "SellPrice"});
            table14.AddRow(new string[] {
                        "100",
                        "105"});
            testRunner.And("ProductModel.MyProduct為", ((string)(null)), table14, "And ");
            testRunner.When("呼叫DataAnnotationValidator的TryValidate方法", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
            testRunner.Then("TryValidate結果應為 false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "MemberName",
                        "ErrorMessage"});
            table15.AddRow(new string[] {
                        "MyPerson.Name",
                        "The MyPerson.Name field is required."});
            table15.AddRow(new string[] {
                        "MyProduct.毛利率",
                        "MyProduct.毛利率需大於6%"});
            testRunner.And("應回傳ValidationResults", ((string)(null)), table15, "And ");
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
